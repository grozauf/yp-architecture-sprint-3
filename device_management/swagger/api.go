// Package swagger provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package swagger

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Получить информацию по устройству
	// (GET /manage/{module_id}/{device_id}/info)
	DeviceInfo(c *gin.Context, moduleId int, deviceId int)
	// Установить статус или целевое значение устройства
	// (POST /manage/{module_id}/{device_id}/set)
	DeviceSetValue(c *gin.Context, moduleId int, deviceId int)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// DeviceInfo operation middleware
func (siw *ServerInterfaceWrapper) DeviceInfo(c *gin.Context) {

	var err error

	// ------------- Path parameter "module_id" -------------
	var moduleId int

	err = runtime.BindStyledParameterWithOptions("simple", "module_id", c.Param("module_id"), &moduleId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter module_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "device_id" -------------
	var deviceId int

	err = runtime.BindStyledParameterWithOptions("simple", "device_id", c.Param("device_id"), &deviceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter device_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeviceInfo(c, moduleId, deviceId)
}

// DeviceSetValue operation middleware
func (siw *ServerInterfaceWrapper) DeviceSetValue(c *gin.Context) {

	var err error

	// ------------- Path parameter "module_id" -------------
	var moduleId int

	err = runtime.BindStyledParameterWithOptions("simple", "module_id", c.Param("module_id"), &moduleId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter module_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "device_id" -------------
	var deviceId int

	err = runtime.BindStyledParameterWithOptions("simple", "device_id", c.Param("device_id"), &deviceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter device_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeviceSetValue(c, moduleId, deviceId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/manage/:module_id/:device_id/info", wrapper.DeviceInfo)
	router.POST(options.BaseURL+"/manage/:module_id/:device_id/set", wrapper.DeviceSetValue)
}
